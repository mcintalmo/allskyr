ra <- 360 - ra
}
rho <- norm(mean)
dec <- asin(z / rho) * 180 / pi
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
ra <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
ra <- 360 - ra
}
rho <- norm(mean)
dec <- asin(z / rho) * 180 / pi
ra
dec
kent
print(ra, dec)
print(paste(ra, dec))
rho <- norm(mean)
dec <- asin(z / rho) * 180 / pi
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
ra <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
ra <- 360 - ra
}
print(paste(ra, dec))
kent
source("initiate.R")
events <- load.events()
showers <- load.showers()
#For finding showers with a lot of events
#max = 0
# max_i = 0
# for (i in 1:nrow(showers)){
#   test.shower <- showers[i,]
#   shower.events <- find.events(test.shower$start.date, test.shower$end.date, events)
#   if (length(shower.events) > max){
#     max <- length(shower.events)
#     max_i <- i
#     print(paste(test.shower$name, " ", length(shower.events), " ", i))
#   }
# }
perseids <- showers[12,]
test.shower <- perseids
shower.events <- find.events(test.shower$peak.date,
test.shower$peak.date,
events)
test.radiants <- shower.radiant(shower.events)
source("initiate.R")
shower.events <- find.events(test.shower$peak.date,
test.shower$peak.date,
events)
test.radiants <- shower.radiant(shower.events)
source('~/allskyr/radiant.R')
shower.events <- find.events(test.shower$peak.date,
test.shower$peak.date,
events)
test.radiants <- shower.radiant(shower.events)
length(test.radiants)
nrow(test.radiants)
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
r <- t(r)
kent <- kent.mle(r)
mean <- kent$G[,1]
x <- mean[1]
y <- mean[2]
z <- mean[3]
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
ra.mean <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
ra.mean <- 360 - ra.mean
}
rho <- norm(mean)
dec.mean <- asin(z / rho) * 180 / pi
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
ra.mean <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
ra.mean <- 360 - ra.mean
}
print(paste(ra.mean, dec.mean))
kappa <- kent$param[1]
sphereplot(r)
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
r <- t(r)
kent <- kent.mle(r)
mean <- kent$G[,1]
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
r <- t(r)
r
test.radiants <- shower.radiant(shower.events)
nrow(test.radiants)
head(test.radiants)
equatorial.to.cartesian
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
warning()
warnings()
r
test.radiants$ra
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
warnings()
pi
1 * pi
test.radiants$ra[[1]]
t(test.radiants$ra)[[1]]
test.radiants$ra[1]
test.radiants$ra[1,]
test.radiants$ra[,1]
test.radiants$ra
length(test.radiants$ra)
test.radiants$ra[[1]]
test.radiants$ra[[2]]
unfactor(test.radiants$ra)
unfactor(test.radiants$ra)
n.events <- length(shower.events)
events <- shower.events
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) cat(next.event - 1, "/", n.events-1, " events\n")
lapply(events[next.event:n.events], function(event2) {
return(c(radiant(event1, event2), event.name(event1), event.name(event2)))
})
})
verbose <- true
verbose <- TRUE
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) cat(next.event - 1, "/", n.events-1, " events\n")
lapply(events[next.event:n.events], function(event2) {
return(c(radiant(event1, event2), event.name(event1), event.name(event2)))
})
})
radiants
unlist(radiants)
radiants
unlist(radiants, recursive = FALSE)
data.frame(unlist(radiants, recursive = FALSE))
data.frame(unlist(radiants, recursive = FALSE))[[1]]
radiants[[1]]
radiants[[2]]
radiants[[3]]
radiants[[4]]
radiants[1,
]
radiants[1,]
radiants[,1]
radiants[1,1]
length(radiants)
nrow(radiants)
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) cat(next.event - 1, "/", n.events-1, " events\n")
sapply(events[next.event:n.events], function(event2) {
return(c(radiant(event1, event2), event.name(event1), event.name(event2)))
})
})
radiants
unlist(radiants, recursive = FALSE)
unlist(radiants, recursive = FALSE)[1]
unlist(radiants, recursive = FALSE)[2]
unlist(radiants, recursive = FALSE)[3]
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
lapply(events[next.event:n.events], function(event2) {
return(c(radiant(event1, event2), event.name(event1), event.name(event2)))
})
})
radiants
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
return(c(radiant(event1, event2), event.name(event1), event.name(event2)))
})
})
radiants
radiants[1]
radiants[,1
]
length(radiants)
radiants[81,]
radiants[80,]
radiants[80]
head(radiants)
test <- data.frame(radiants)
test
test <- data.frame(unlist(radiants))
test
test <- matrix(unlist(radiants), nrow = 5)
test
test[1]
test[2]
test[3]
test[4]
test[1,0]
test[0,1]
test[1,1]
test[5,1]
test[5,2]
test[5,3]
dat <- data.frame(ra = radiants[,1], dec = radiants[,2], antirad = radiants[,3], event1 = radiants[,4], event2 = radiants[,5])
test[,3]
test[1,]
dat <- data.frame(ra = radiants[1,], dec = radiants[2,], antirad = radiants[3,], event1 = radiants[4,], event2 = radiants[5,])
radiants[1,]
radiants
dat <- data.frame(ra = test[1,], dec = test[2,], antirad = test, event1 = radiants[4,], event2 = test[5,])
dat <- data.frame(ra = test[1,], dec = test[2,], antirad = test, event1 = test[4,], event2 = test[5,])
dat <- data.frame(ra = test[1,], dec = test[2,], antirad = test[3,], event1 = test[4,], event2 = test[5,])
data
dat
radiants
# Convert the output to a happy data frame
radiants <- matrix(unlist(radiants), nrow = 5)
radiants
dat <- data.frame(ra      = radiants[1,],
dec     = radiants[2,],
antirad = radiants[3,],
event1  = radiants[4,],
event2  = radiants[5,])
dat
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
shower.events <- find.events(test.shower$peak.date,
test.shower$peak.date,
events)
test.radiants <- shower.radiant(shower.events)
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
r
test.radiants
warnings()
test.radiants$ra
class(test.radiants$ra)
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
return(c(radiant(event1, event2), event.name(event1), event.name(event2)))
})
})
radiants
radiants[1]
radiants[1,1]
radiants[1]
radiants[1][82]
radiants[1][,82]
radiants[1,82]
radiants
radiants[[1]]
radiants[[1]][1]
radiants[[1]][,1]
radiants[[1]][,1][1]
class(radiants[[1]][,1][1])
source('~/allskyr/radiant.R')
source('~/allskyr/shower.R')
shower.events <- find.events(test.shower$peak.date,
test.shower$peak.date,
events)
test.radiants <- shower.radiant(shower.events)
source('~/allskyr/shower.R')
shower.events <- find.events(test.shower$peak.date,
test.shower$peak.date,
events)
test.radiants <- shower.radiant(shower.events)
test.radiants
test.radiants$ra
test.radiants$ra[1]
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
rad <- radiant(event1, event2)
radiant_frame <- data.frame(ra = rad$ra,
dec = rad$dec,
antirad = rad$antirad,
event1 = event.name(event1),
event2 = event.name(event2))
return(c(radiant(event1, event2), event.name(event1), event.name(event2)))
})
})
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
rad <- radiant(event1, event2)
radiant_frame <- data.frame(ra = rad$ra,
dec = rad$dec,
antirad = rad$antirad,
event1 = event.name(event1),
event2 = event.name(event2))
return(radiant_frame)
})
})
radiants
rbind(radiants)
rbind(unlist(radiants))
radiants
unlist(radiants)
radiants
radiant
radiant
radiants
as.data.frame(radiants)
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
return(radiant(event1, event2))
})
})
radiants
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
return(c(radiant(event1, event2), event.name(event1), event.name(event2)))
})
})
radiants
radiants[[82]]
radiants[[82]]$ra
radiants[[82]]$[ra]
radiants[[82]]$[,1]
radiants[[82]][1]
radiants[[82]][2]
radiants[[82]][[1]]
radiants[[82]][[2]]
radiants[[82]]
class(radiants[[82]])
class(radiants[[82]][1])
radiants[[82]][1]
class(radiants[[82]][[1]])
unlist(radiants)
raidants
radiants
unlist(radiants, recursive = FALSE)
unlist(radiants, recursive = FALSE)[1]
unlist(radiants, recursive = FALSE)[[1]]
class(unlist(radiants, recursive = FALSE)[[1]])
radiants
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
rad <- radiant(event1, event2)
rad$event1 <- event.name(event1)
rad$event2 <- event.name(event2)
return(rad)
})
})
radiants
unlist(radiants)
unlist(radiants, recursive = FALSE)
radiant
radiants
test <- bind_rows(radiants)
ensure.package("dplyr")
install.packages(pkgs = package, repos = "http://cran.r-project.org")
ensure.package("dplyr")
ensure.package("dplyr")
test <- bind_rows(radiants)
test <- bind_rows(radiants, .id = "column_label")
radiants
names(radnats) <- c("ra", "dec", "antirad", "event1", "event2")
names(radiants) <- c("ra", "dec", "antirad", "event1", "event2")
test <- bind_rows(radiants)
names(radiants)
names(radiants) <- NA
names(radiants)
radiants
class(radiants)
class(radiants[[1]])
radiants[[1]]
radiants <- lapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
lapply(events[next.event:n.events], function(event2) {
rad <- radiant(event1, event2)
rad$event1 <- event.name(event1)
rad$event2 <- event.name(event2)
return(rad)
})
})
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
rad <- radiant(event1, event2)
rad$event1 <- event.name(event1)
rad$event2 <- event.name(event2)
return(rad)
})
})
source('~/allskyr/initiate.R')
radiants <- sapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
sapply(events[next.event:n.events], function(event2) {
rad <- radiant(event1, event2)
rad$event1 <- event.name(event1)
rad$event2 <- event.name(event2)
return(rad)
})
})
radiants <- lapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
lapply(events[next.event:n.events], function(event2) {
rad <- radiant(event1, event2)
rad$event1 <- event.name(event1)
rad$event2 <- event.name(event2)
return(rad)
})
})
radiants
test <- bind_rows(radiants)
test
test$ra
class(test$ra)
radiant
radiants
bind_rows(radiants)
shower.events <- find.events(test.shower$peak.date,
test.shower$peak.date,
events)
test.radiants <- shower.radiant(shower.events)
test.radiants
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
warnings()
test.radiants
test.radiants$ra
bind_rows(radiants)
radiants <- lapply(events[-n.events], function(event1){
next.event <- match(event.name(event1), event.name(events)) + 1
if(verbose) {
cat(next.event - 1, "/", n.events - 1, " events\n")
}
lapply(events[next.event:n.events], function(event2) {
rad <- radiant(event1, event2)
rad$event1 <- event.name(event1)
rad$event2 <- event.name(event2)
return(rad)
})
})
bind_rows(radiants)
bind_rows(radiants)$ra
class(bind_rows(radiants)$ra[1])
test.radiants
test.radiants$ra
class(bind_rows(radiants)$ra)
class(test.radiants$ra)
source('~/allskyr/shower.R')
shower.events <- find.events(test.shower$peak.date,
test.shower$peak.date,
events)
test.radiants <- shower.radiant(shower.events)
t
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
r <- t(r)
r
kent <- kent.mle(r)
mean <- kent$G[,1]
x <- mean[1]
y <- mean[2]
z <- mean[3]
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
ra.mean <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
ra.mean <- 360 - ra.mean
}
rho <- norm(mean)
dec.mean <- asin(z / rho) * 180 / pi
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
ra.mean <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
ra.mean <- 360 - ra.mean
}
print(paste(ra.mean, dec.mean))
kappa <- kent$param[1]
sphereplot(r)
test.shower
kappa
suspected.events <- suspect.events(test.shower,
remove.antiradiant=FALSE,
aggression=0.25)
