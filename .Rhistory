print(kent)
print(vmf)
}
mean <- kent$G[,1]
x <- mean[1]
y <- mean[2]
z <- mean[3]
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
mean.ra <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
mean.ra <- 360 - mean.ra
}
rho <- norm(mean)
mean.dec <- asin(z / rho) * 180 / pi
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
mean.ra <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
mean.ra <- 360 - mean.ra
}
kappa <- kent$param[1]
beta <- kent$param[2]
psi <- kent$param[3]
return(data.frame(n.events = n.events,
n.radiants = n.radiants,
mean.ra = mean.ra,
mean.dec = mean.dec,
kappa = kappa,
beta = beta,
psi = psi))
}
radiant.stats <- mean.radiant(shower, TRUE)
mean.radiant <- function(shower, recalc.radiants = TRUE, verbose = TRUE){
n.events <- 0
if(!recalc.radiants && file.exists(paste("./save-files/radiants/",
shower$abbrev,
substr(shower$start.date, 1, 4),
".txt",
sep=""))){
test.radiants <- load.radiant(shower)
n.events <- 0.5 * (sqrt(8 * nrow(test.radiants) + 1) - 1)
} else{
shower.events <- find.events(shower$peak.date,
shower$peak.date,
events)
n.events <- length(shower.events)
test.radiants <- shower.radiant(shower.events)
}
n.radiants <- nrow(test.radiants)
if (n.radiants < 2){
return(data.frame(mean.ra = NA,
mean.dec = NA,
kappa = NA,
n.radiants = n.radiants))
}
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
r <- t(r)
print(fishkent(r, B = 1))
kent <- kent.mle(r)
vmf <- vmf.mle(r)
# sphereplot(r)
if(verbose){
print(kent)
print(vmf)
}
mean <- kent$G[,1]
x <- mean[1]
y <- mean[2]
z <- mean[3]
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
mean.ra <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
mean.ra <- 360 - mean.ra
}
rho <- norm(mean)
mean.dec <- asin(z / rho) * 180 / pi
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
mean.ra <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
mean.ra <- 360 - mean.ra
}
kappa <- kent$param[1]
beta <- kent$param[2]
psi <- kent$param[3]
return(data.frame(n.events = n.events,
n.radiants = n.radiants,
mean.ra = mean.ra,
mean.dec = mean.dec,
kappa = kappa,
beta = beta,
psi = psi))
}
radiant.stats <- mean.radiant(shower, TRUE)
mean.radiant <- function(shower, recalc.radiants = TRUE, verbose = TRUE){
n.events <- 0
if(!recalc.radiants && file.exists(paste("./save-files/radiants/",
shower$abbrev,
substr(shower$start.date, 1, 4),
".txt",
sep=""))){
test.radiants <- load.radiant(shower)
n.events <- 0.5 * (sqrt(8 * nrow(test.radiants) + 1) - 1)
} else{
shower.events <- find.events(shower$peak.date,
shower$peak.date,
events)
n.events <- length(shower.events)
test.radiants <- shower.radiant(shower.events)
}
n.radiants <- nrow(test.radiants)
if (n.radiants < 2){
return(data.frame(mean.ra = NA,
mean.dec = NA,
kappa = NA,
n.radiants = n.radiants))
}
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
r <- t(r)
print(fishkent(r, B = 1))
kent <- kent.mle(r)
vmf <- vmf.mle(r)
sphereplot(r)
if(verbose){
print(kent)
print(vmf)
}
mean <- kent$G[,1]
x <- mean[1]
y <- mean[2]
z <- mean[3]
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
mean.ra <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
mean.ra <- 360 - mean.ra
}
rho <- norm(mean)
mean.dec <- asin(z / rho) * 180 / pi
#Convert cartesian coordinates to equatorial
rho <- norm(c(x, y))
mean.ra <- (acos(x / rho) * 180 / pi) %% 360
if(y < 0){
mean.ra <- 360 - mean.ra
}
kappa <- kent$param[1]
beta <- kent$param[2]
psi <- kent$param[3]
return(data.frame(n.events = n.events,
n.radiants = n.radiants,
mean.ra = mean.ra,
mean.dec = mean.dec,
kappa = kappa,
beta = beta,
psi = psi))
}
radiant.stats <- mean.radiant(shower, TRUE)
source("initiate.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
shower.data
shower.data <- subset(shower.data,
select = -c(start.date, end.date, gamma, v, r, zhr))
write.csv(shower.data, file = "mean_radiant_data_3.csv")
test.radiants
i <- 12
print(paste(i, showers[i,]$name))
shower <- showers[i,]
shower.events <- find.events(shower$peak.date, shower$peak.date, events)
radiant.stats <- mean.radiant(shower.events)
test.radiants <- shower.radiant(shower.events)
r <- equatorial.to.cartesian(test.radiants$ra, test.radiants$dec)
r <- t(r)
print(fishkent(r, B = 1))
kent <- kent.mle(r)
vmf <- vmf.mle(r)
kent
vmf
print(fishkent(r, B = 1))
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
warnings()
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
write.csv(shower.data, file = "mean_radiant_data_6.csv")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/radiant.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
shower.data <- subset(shower.data,
select = -c(start.date, end.date, gamma, v, r, zhr))
shower.data
source("~/allskyr/playground.R")
write.csv(shower.data, file = "mean_radiant_data_8.csv")
novacheck.dates <- list(20091020, 20091120, 20091214, 2010013)
for (i in 1:length(novacheck.dates)){
date <- novacheck.dates[[i]]
shower.events <- find.events(date, date, events)
radiant.stats <- mean.radiant(shower.events)
radiant.stats$n.events <- length(shower.events)
radiant.stats$peak.date <- date
shower.data <- bind_rows(shower.data, radiant.stats)
}
source("~/allskyr/playground.R")
novacheck.dates <- list('20091020', '20091120', '20091214', '2010013')
for (i in 1:length(novacheck.dates)){
date <- novacheck.dates[[i]]
shower.events <- find.events(date, date, events)
radiant.stats <- mean.radiant(shower.events)
radiant.stats$n.events <- length(shower.events)
radiant.stats$peak.date <- date
shower.data <- bind_rows(shower.data, radiant.stats)
}
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/outlier.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/outlier.R")
source("~/allskyr/outlier.R")
source("~/allskyr/playground.R")
source("~/allskyr/outlier.R")
source("~/allskyr/playground.R")
source("~/allskyr/outlier.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/outlier.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/outlier.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/outlier.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
write.csv(shower.data, file = "mean_radiant_data_10.csv")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
shower.data
source("~/allskyr/playground.R")
write.csv(shower.data, file = "mean_radiant_data_11.csv")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
citation(package = "cluster")
citation(package = "Directionarl")
citation(package = "Directional")
citation(package = "astrolibr")
citation(package = "astrolibR")
citation(package = "VGAM")
citation(package = "vgam")
citation(package = "Vgam")
VGAM
citation(package = "VGAM")
citation(package = "VGAM")
citation(package = VGAM)
citation(package = "VGAM")
install.packages('VGAM')
citation(package = "VGAM")
citation(package = "VGAM").toBibtex(.)
toBibtex(citation(package = "VGAM"))
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/playground.R")
source("~/allskyr/shower_statistics.R")
source("~/allskyr/shower_statistics.R")
source("~/allskyr/shower_statistics.R")
save.radiant.statistics()
source("~/allskyr/shower_statistics.R")
save.radiant.statistics()
events <- load.events()
showers <- load.showers()
shower.data <- data.frame()
all.showers = false
all.showers = FALSE
if (all.showers){
indices <- 1:nrow(showers) # all showers
} else {
indices <- c(12, 19, 29, 107, 139, 150, 192) # important shower indices
}
aggression = 0.0
# Go over every given shower, find the mean radiant with associated statistics,
#  and bind them all into a single data frame.
for (i in indices){
print(paste(i, showers[i,]$name))
shower <- showers[i,]
radiant.stats <- mean.radiant(events,
shower,
aggression = aggression)
shower <- cbind(shower, radiant.stats)
shower.data <- bind_rows(shower.data, shower)
}
# Go over the showers mentioned in Novacheck 2012 that data are available for.
#  Find the mean radiant with associated statistics, and bind them all into
#  a same data frame as above.
novacheck.dates <- list('20091020', '20091120', '20091214', '20100103')
for (i in 1:length(novacheck.dates)){
date <- novacheck.dates[[i]]
shower.events <- find.events(events, date)
radiant.stats <- mean.radiant(shower.events)
radiant.stats$peak.date <- date
shower.data <- bind_rows(shower.data, radiant.stats)
}
if(all.showers){
file = paste(file, "_all_showers", sep = "")
}
if(aggression > 0.0){
file = paste(file, "_aggression_", str(ceiling(aggression * 100)), sep = "")
}
shower.data
shower.data$
""
shower.data[,1]
shower.data[1,]
shower.data[,0]
shower.data[0,]
shower.data
shower.data <- data.frame()
if (all.showers){
indices <- 1:nrow(showers) # all showers
} else {
indices <- c(12, 19, 29, 107, 139, 150, 192) # important shower indices
}
# Go over every given shower, find the mean radiant with associated statistics,
#  and bind them all into a single data frame.
for (i in indices){
print(paste(i, showers[i,]$name))
shower <- showers[i,]
radiant.stats <- mean.radiant(events,
shower,
aggression = aggression)
shower <- cbind(shower, radiant.stats)
shower.data <- rbind(shower.data, shower)
}
# Go over the showers mentioned in Novacheck 2012 that data are available for.
#  Find the mean radiant with associated statistics, and bind them all into
#  a same data frame as above.
novacheck.dates <- list('20091020', '20091120', '20091214', '20100103')
for (i in 1:length(novacheck.dates)){
date <- novacheck.dates[[i]]
shower.events <- find.events(events, date)
radiant.stats <- mean.radiant(shower.events)
radiant.stats$peak.date <- date
shower.data <- rbind(shower.data, radiant.stats)
}
for (i in 1:length(novacheck.dates)){
date <- novacheck.dates[[i]]
shower.events <- find.events(events, date)
radiant.stats <- mean.radiant(shower.events)
radiant.stats$peak.date <- date
shower.data <- bind_rows(shower.data, radiant.stats)
}
shower.data
shower.data <- data.frame()
if (all.showers){
indices <- 1:nrow(showers) # all showers
} else {
indices <- c(12, 19, 29, 107, 139, 150, 192) # important shower indices
}
# Go over every given shower, find the mean radiant with associated statistics,
#  and bind them all into a single data frame.
for (i in indices){
print(paste(i, showers[i,]$name))
shower <- showers[i,]
radiant.stats <- mean.radiant(events,
shower,
aggression = aggression)
shower <- cbind(shower, radiant.stats)
shower.data <- rbind(shower.data, shower)
}
shower.data
if(all.showers){
file = paste(file, "_all_showers", sep = "")
}
if(aggression > 0.0){
file = paste(file, "_aggression_", str(ceiling(aggression * 100)), sep = "")
}
all.showers = TRUE
if (all.showers){
indices <- 1:nrow(showers) # all showers
} else {
indices <- c(12, 19, 29, 107, 139, 150, 192) # important shower indices
}
# Go over every given shower, find the mean radiant with associated statistics,
#  and bind them all into a single data frame.
for (i in indices){
print(paste(i, showers[i,]$name))
shower <- showers[i,]
radiant.stats <- mean.radiant(events,
shower,
aggression = aggression)
shower <- cbind(shower, radiant.stats)
shower.data <- rbind(shower.data, shower)
}
# Go over every given shower, find the mean radiant with associated statistics,
#  and bind them all into a single data frame.
for (i in indices){
print(paste(i, showers[i,]$name))
shower <- showers[i,]
radiant.stats <- mean.radiant(events,
shower,
aggression = aggression)
shower <- cbind(shower, radiant.stats)
shower.data <- bind_rows(shower.data, shower)
}
if(all.showers){
file = paste(file, "_all_showers", sep = "")
}
if(aggression > 0.0){
file = paste(file, "_aggression_", str(ceiling(aggression * 100)), sep = "")
}
file = "radiant_statistics"
if(all.showers){
file = paste(file, "_all_showers", sep = "")
}
if(aggression > 0.0){
file = paste(file, "_aggression_", str(ceiling(aggression * 100)), sep = "")
}
shower.data
shower.data$name <- str_replace_all(shower.data$name, "α", "$\alpha$")
shower.data
source("~/Thesis/allskyr/shower_statistics.R", encoding = 'UTF-8')
save.radiant.statistics("delete_this")
save.radiant.statistics("delete_this")
save.radiant.statistics("delete_this")
